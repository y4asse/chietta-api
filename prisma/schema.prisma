generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Trivia {
  id         String        @id @default(uuid())
  title      String        @unique
  content    String
  detail     String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt @map("updated_at")
  categories CategoryMap[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  categoryMap CategoryMap[]

  @@index([name])
}

model CategoryMap {
  id               Int      @id @default(autoincrement())
  trivia_id        String
  category_id      Int
  trivia           Trivia   @relation(fields: [trivia_id], references: [id])
  category         Category @relation(fields: [category_id], references: [id])
  createdAt        DateTime @default(now())
  post_category_id Int?

  @@index([category_id])
  @@index([trivia_id])
}

model Post {
  id              String            @id @default(uuid())
  url             String            @unique
  provider        String
  createdAt       DateTime
  title           String
  postCategoryMap PostCategoryMap[]

  @@index([createdAt])
}

model PostCategory {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  postCategoryMap PostCategoryMap[]

  @@index([name])
}

model PostCategoryMap {
  id               Int          @id @default(autoincrement())
  post_category    PostCategory @relation(fields: [post_category_id], references: [id])
  post_category_id Int
  post             Post         @relation(fields: [post_id], references: [id])
  post_id          String

  @@index([post_category_id])
  @@index([post_id])
}

// default
// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
